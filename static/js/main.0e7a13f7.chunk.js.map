{"version":3,"sources":["robinhood.svg","components/Header.js","components/LineGraph.js","components/Newsfeed.js","components/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","Logo","alt","width","placeholder","type","href","LineGraph","useState","graphData","setGraphData","useEffect","data","value","i","date","Date","setHours","setDate","Math","round","random","push","x","y","createMockData","datasets","backgroundColor","borderColor","borderWidth","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointHoverRadius","options","maintainAspectRatio","legend","display","tooltips","mode","intersect","scales","xAxes","time","displayFormats","tooltipFormat","ticks","yAxes","Newsfeed","Stats","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAAe,G,YAAA,IAA0B,uC,MC8B1BA,MA1Bf,WACE,OACE,sBAAKC,UAAU,kBAAf,UAEE,qBAAKA,UAAU,eAAf,SACE,qBAAKC,IAAKC,EAAMC,IAAI,iBAAiBC,MAAO,OAG9C,qBAAKJ,UAAU,iBAAf,SACE,qBAAKA,UAAU,0BAAf,SACE,uBAAOK,YAAY,SAASC,KAAK,aAIrC,sBAAKN,UAAU,oBAAf,UAEE,mBAAGO,KAAK,IAAR,yBACA,mBAAGA,KAAK,IAAR,uBACA,mBAAGA,KAAK,IAAR,kBACA,mBAAGA,KAAK,IAAR,sBACA,mBAAGA,KAAK,IAAR,4B,+BCsEOC,MA1Ff,WAAsB,IAAD,EAEeC,mBAAS,IAFxB,mBAEZC,EAFY,KAEDC,EAFC,KAsCnB,OARAC,qBAAU,YAda,WAGrB,IAFA,IAAIC,EAAO,GACPC,EAAQ,GACJC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC3B,IAAIC,EAAO,IAAIC,KACfD,EAAKE,SAAS,EAAE,EAAE,EAAE,GACpBF,EAAKG,QAAQJ,GACbD,GAASM,KAAKC,OAAOD,KAAKE,SAAW,GAAM,EAAI,GAAKF,KAAKE,SAAW,IACpET,EAAKU,KAAK,CAACC,EAAGR,EAAMS,EAAGX,IAEzBH,EAAaE,GAKba,KACC,IAOD,qBAAK1B,UAAU,YAAf,SACE,cAAC,OAAD,CACEa,KAAM,CACJc,SAAU,CAAC,CACTrB,KAAM,OACNO,KAAMH,EACNkB,gBAAiB,UACjBC,YAAa,UACbC,YAAa,EACbC,iBAAkB,gBAClBC,qBAAsB,gBACtBC,0BAA2B,UAC3BC,sBAAuB,UACvBC,sBAAuB,EACvBC,iBAAkB,KAGtBC,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,KAAM,QACNC,WAAW,GAEbC,OAAQ,CACNC,MAAO,CACL,CACEvC,KAAM,OACNwC,KAAM,CACJC,eAAgB,WAChBC,cAAe,MAEjBC,MAAO,CACLT,SAAS,KAIfU,MAAO,CAAC,CACND,MAAO,CACLT,SAAS,YC9DVW,MAlBf,WACE,OACE,qBAAKnD,UAAU,WAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,6CACA,0DAEF,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,cCaGoD,MAzBf,WACE,OACE,qBAAKpD,UAAU,QAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,yCAEF,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,kBAIjB,qBAAKA,UAAU,eAAf,SACE,wCAEF,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,wBCKVqD,MAlBf,WACE,OACE,sBAAKrD,UAAU,MAAf,UAEE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,aCHKsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0e7a13f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robinhood.e6522d76.svg\";","import React from 'react'\r\nimport Logo from '../robinhood.svg'\r\nimport '../assets/Header.css'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header__wrapper\">\r\n      {/* logo */}\r\n      <div className=\"header__logo\"> \r\n        <img src={Logo} alt=\"robinhood logo\" width={25}/>\r\n      </div>\r\n      {/* Searchbar */}\r\n      <div className=\"header__search\">\r\n        <div className=\"header__searchContainer\">\r\n          <input placeholder=\"Search\" type=\"text\"/>   \r\n        </div>\r\n      </div>\r\n      {/* menu items */}\r\n      <div className=\"header__menuItems\">\r\n\r\n        <a href=\"#\">Free Stocks</a>\r\n        <a href=\"#\">Portfolio</a>\r\n        <a href=\"#\">Cash</a>\r\n        <a href=\"#\">Messages</a>\r\n        <a href=\"#\">Account</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useState } from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport '../assets/LineGraph.css'\r\n\r\nfunction LineGraph() {\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const data = \r\n  [{\r\n    x: 10,\r\n    y: 20\r\n  }, {\r\n    x: 15, \r\n    y: 10\r\n  }, {\r\n    x: 12,\r\n    y: 4\r\n  }]\r\n\r\n  const createMockData = () => {\r\n    let data = [];\r\n    let value = 50;\r\n    for(var i = 0; i < 365; i++) {\r\n      let date = new Date();\r\n      date.setHours(0,0,0,0);\r\n      date.setDate(i);\r\n      value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random() * 10);\r\n      data.push({x: date, y: value});\r\n    }\r\n    setGraphData(data);\r\n  }\r\n\r\n  \r\n  useEffect(()=>{\r\n    createMockData();\r\n  }, []) //will run depending on what data changes\r\n  // will run depending on what data changes \r\n  // if set to empty array, nothing in there, it will run once when the component is loaded\r\n  // will listen on when the component is loaded\r\n  \r\n\r\n  return (\r\n    <div className=\"linegraph\">\r\n      <Line \r\n        data={{\r\n          datasets: [{\r\n            type: \"line\",\r\n            data: graphData,\r\n            backgroundColor: \"#000000\",\r\n            borderColor: \"#5AC53B\",\r\n            borderWidth: 2,\r\n            pointBorderColor: 'rgba(0,0,0,0)',\r\n            pointBackgroundColor: 'rgba(0,0,0,0)',\r\n            pointHoverBackgroundColor: \"#5AC53B\",\r\n            pointHoverBorderColor: \"#000000\",\r\n            pointHoverBorderWidth: 4,\r\n            pointHoverRadius: 6\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          legend: {\r\n            display: false\r\n          },\r\n          tooltips: {\r\n            mode: \"index\",\r\n            intersect: false\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"time\",\r\n                time: {\r\n                  displayFormats: \"MM/DD/YY\",\r\n                  tooltipFormat: \"ll\"\r\n                },\r\n                ticks: {\r\n                  display: false\r\n                }\r\n              }\r\n            ],\r\n            yAxes: [{\r\n              ticks: {\r\n                display: false\r\n              }\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\nimport '../assets/Newsfeed.css'\r\nimport LineGraph from './LineGraph'\r\n\r\nfunction Newsfeed() {\r\n  return (\r\n    <div className=\"newsfeed\">\r\n      <div className=\"newsfeed__container\">\r\n        <div className=\"newsfeed__chartSection\">\r\n          <div className=\"newsfeed__portfolio\">\r\n            <h1>$114,656.84</h1>\r\n            <p>+$44.63 (+0.04%) Today</p>\r\n          </div>\r\n          <div className=\"newsfeed__chart\">\r\n            <LineGraph />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Newsfeed\r\n","import React from 'react'\r\n\r\nfunction Stats() {\r\n  return (\r\n    <div className=\"stats\">\r\n      <div className=\"stats__container\">\r\n        <div className=\"stats__header\">\r\n          <p>Stocks</p>\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {/* for our current stocks */}\r\n          </div>\r\n        </div>\r\n        <div className=\"stats_header\">\r\n          <p>Lists</p>\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {/* stocks we can buy */}\r\n          </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stats\r\n","import './assets/App.css';\nimport Header from './components/Header';\nimport Newsfeed from './components/Newsfeed';\nimport Stats from './components/Stats';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Header */}\n      <div className=\"app__header\">\n        <Header />\n      </div>\n      <div className=\"app__body\">\n        <div className=\"app__container\">\n          <Newsfeed />\n          <Stats />\n        </div>\n      </div>\n      {/* Body */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}